import * as vscode from 'vscode';

const jsDocTagNames: readonly vscode.CompletionItem[] = [
    'abstract',
    'access',
    'alias',
    'argument',
    'async',
    'augments',
    'author',
    'borrows',
    'callback',
    'class',
    'classdesc',
    'constant',
    'constructor',
    'constructs',
    'copyright',
    'default',
    'deprecated',
    'description',
    'emits',
    'enum',
    'event',
    'example',
    'exports',
    'extends',
    'external',
    'field',
    'file',
    'fileoverview',
    'fires',
    'function',
    'generator',
    'global',
    'hideconstructor',
    'host',
    'ignore',
    'implements',
    'inheritdoc',
    'inner',
    'instance',
    'interface',
    'kind',
    'lends',
    'license',
    'link',
    'linkcode',
    'linkplain',
    'listens',
    'member',
    'memberof',
    'method',
    'mixes',
    'module',
    'name',
    'namespace',
    'overload',
    'override',
    'package',
    'param',
    'private',
    'prop',
    'property',
    'protected',
    'public',
    'readonly',
    'requires',
    'returns',
    'satisfies',
    'see',
    'since',
    'static',
    'summary',
    'template',
    'this',
    'throws',
    'todo',
    'tutorial',
    'type',
    'typedef',
    'var',
    'variation',
    'version',
    'virtual',
    'yields',
].map((tagName: string): vscode.CompletionItem => {
    const item: vscode.CompletionItem = new vscode.CompletionItem({
        label: tagName,
        description: 'jsDoc-like',
    });
    item.kind = vscode.CompletionItemKind.Keyword;
    // item.insertText = tagName;
    item.detail = 'by-neko-help';
    return item;
});

export function completionsJsDocTag(
    context: vscode.CompletionContext,
): never[] | readonly vscode.CompletionItem[] {
    return context.triggerCharacter === '@'
        ? jsDocTagNames
        : [];
}
