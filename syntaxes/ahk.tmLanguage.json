{
    "third_party_code": [ "the 'inline_tags', 'brackets', 'jsdoctype', 'docblock' code is from https://github.com/microsoft/TypeScript-TmLanguage/commit/644389aef914fc6fbc97a4dd799cc2d1431ffc87" ],
    "fileTypes": [ "ahk" ],
    "name": "AutoHotkey",
    "patterns": [
        { "include": "#escaped_char" },
        { "include": "#comment" },
        { "include": "#label_line" },
        { "include": "#flow_of_control" },
        { "include": "#command" },
        {
            "match": "::\\{(?:d20ea4e1\\-3957\\-11d2\\-a40b\\-0c5020524153|85bbd920\\-42a0\\-1069\\-a2e4\\-08002b30309d|21ec2020\\-3aea\\-1069\\-a2dd\\-08002b30309d|d20ea4e1\\-3957\\-11d2\\-a40b\\-0c5020524152|ff393560\\-c2a7\\-11cf\\-bff4\\-444553540000|00020d75\\-0000\\-0000\\-c000\\-000000000046|00028b00\\-0000\\-0000\\-c000\\-000000000046|20d04fe0\\-3aea\\-1069\\-a2d8\\-08002b30309d|450d8fba\\-ad25\\-11d0\\-98a8\\-0800361b1103|208d2c60\\-3aea\\-1069\\-a2d7\\-08002b30309d|1f4de370\\-d627\\-11d1\\-ba4f\\-00a0c91eedba|7007acc7\\-3202\\-11d1\\-aad2\\-00805fc1270e|2227a280\\-3aea\\-1069\\-a2de\\-08002b30309d|7be9d83c\\-a729\\-4d97\\-b5a7\\-1b7313c39e0a|645ff040\\-5081\\-101b\\-9f08\\-00aa002f954e|e211b736\\-43fd\\-11d1\\-9efb\\-0000f8757fcd|d6277990\\-4c6a\\-11cf\\-8d87\\-00aa0060f5bf|48e7caab\\-b918\\-4e58\\-a94d\\-505519c795dc|7bd29e00\\-76c1\\-11cf\\-9dd0\\-00a0c9034933|bdeadf00\\-c265\\-11d0\\-bced\\-00a0c90ab50f)\\}",
            "name": "string.windows_class_identifiers.ahk"
        },
        { "include": "#hotstring" },
        { "include": "#hotkey" },
        { "include": "#directives" },
        { "include": "#class_def_line" },
        { "include": "#old_set_var_legacy_assignment" },
        { "include": "#string_multi_line" },
        { "include": "#builtin_variable" },
        { "include": "#declaration" },
        { "include": "#operator" },
        { "include": "#number" },
        { "include": "#string" },
        { "include": "#func_call" },
        { "include": "#keyword_operator" }
    ],
    "repository": {
        "builtin_variable": {
            "patterns": [
                {
                    "match": "(?<![.#])\\b(?i:A_(?:AhkPath|AhkVersion|AppData|AppDataCommon|Args|AutoTrim|BatchLines|NumBatchLines|CaretX|CaretY|Clipboard|ComSpec|ComputerName|ControlDelay|CoordModeCaret|CoordModeMenu|CoordModeMouse|CoordModePixel|CoordModeToolTip|Cursor|DD|MDay|DDD|DDDD|DefaultGui|DefaultListView|DefaultMouseSpeed|DefaultTreeView|Desktop|DesktopCommon|DetectHiddenText|DetectHiddenWindows|EndChar|EventInfo|ExitReason|FileEncoding|FormatFloat|FormatInteger|Gui|GuiControl|GuiControlEvent|GuiEvent|GuiHeight|GuiWidth|GuiX|GuiY|Hour|IPAddress1|IPAddress2|IPAddress3|IPAddress4|IconFile|IconHidden|IconNumber|IconTip|Index|Is64bitOS|IsAdmin|IsCompiled|IsCritical|IsPaused|IsSuspended|IsUnicode|KeyDelay|KeyDelayPlay|KeyDuration|KeyDurationPlay|Language|LastError|LineFile|LineNumber|ListLines|LoopField|LoopFileAttrib|LoopFileDir|LoopFileExt|LoopFileFullPath|LoopFileLongPath|LoopFileName|LoopFilePath|LoopFileShortName|LoopFileShortPath|LoopFileSize|LoopFileSizeKB|LoopFileSizeMB|LoopFileTimeAccessed|LoopFileTimeCreated|LoopFileTimeModified|LoopReadLine|LoopRegKey|LoopRegName|LoopRegSubKey|LoopRegTimeModified|LoopRegType|MM|Mon|MMM|MMMM|MSec|Min|MouseDelay|MouseDelayPlay|MyDocuments|Now|NowUTC|OSType|OSVersion|PriorHotkey|PriorKey|ProgramFiles|Programs|ProgramsCommon|PtrSize|RegView|ScreenDPI|ScreenHeight|ScreenWidth|ScriptDir|ScriptFullPath|ScriptHwnd|ScriptName|Sec|SendLevel|SendMode|Space|StartMenu|StartMenuCommon|Startup|StartupCommon|StoreCapsLockMode|StringCaseSense|Tab|Temp|ThisFunc|ThisHotkey|ThisLabel|ThisMenu|ThisMenuItem|ThisMenuItemPos|TickCount|TimeIdle|TimeIdleKeyboard|TimeIdleMouse|TimeIdlePhysical|TimeSincePriorHotkey|TimeSinceThisHotkey|TitleMatchMode|TitleMatchModeSpeed|UserName|WDay|WinDelay|WinDir|WorkingDir|InitialWorkingDir|YDay|YWeek|YYYY|Year))\\b",
                    "name": "variable.other.constant.builtin.ahk"
                },
                {
                    "match": "(?<![.#])\\b(?i:Clipboard|ClipboardAll|ComSpec|ErrorLevel|False|ProgramFiles|True|this)\\b",
                    "name": "variable.other.constant.builtin.ahk"
                },
                {
                    "match": "(?<=(?i:this)\\.)[#$@\\w\\x{A1}-\\x{FFFF}]+(?=[#$@.`%!\"/&')*+,\\-:;<=>?\\[[\\^\\\\]{|}~ \t]|$)",
                    "name": "variable.other.property.ahk"
                }
            ]
        },
        "class_def_line": {
            "name": "meta.block.class.ahk",
            "begin": "(?:^[ \\t}]*)\\b(?i:(class)\\b[ \\t]+([#$@\\w\\x{A1}-\\x{FFFF}]+)(?:[ \\t]+(extends)[ \\t]+(\\w+))?)",
            "end": "\n",
            "beginCaptures": {
                "1": { "name": "storage.type.class.ahk" },
                "2": { "name": "entity.name.type.class.ahk" },
                "3": { "name": "storage.modifier.type.class.extends.ahk" },
                "4": { "name": "entity.name.type.class.ahk" }
            },
            "patterns": [ { "include": "#comment" } ]
        },
        "command": {
            "patterns": [
                {
                    "name": "meta.command.line.autotrim.ahk",
                    "begin": "(?<=^|[ \\t:])\\b(?i:(AutoTrim))\\b(?!\\()",
                    "end": "(\\n)",
                    "beginCaptures": { "1": { "name": "support.function.ahk" } },
                    "patterns": [
                        {
                            "name": "keyword.command.option.ahk",
                            "match": "\\b(?i:on|off)\\b"
                        },
                        { "include": "#number" }
                    ]
                },
                {
                    "name": "meta.command.line.transform.ahk",
                    "begin": "(?<=^|[ \\t:])\\b(?i:(Transform))\\b(?!\\()",
                    "end": "(\\n)",
                    "beginCaptures": { "1": { "name": "support.function.ahk" } },
                    "patterns": [
                        {
                            "name": "keyword.command.option.ahk",
                            "match": "\\b(?i:Unicode|Deref|HTML|Asc|Chr|Mod|Exp|Sqrt|Log|Ln|Round|Ceil|Floor|Abs|Sin|Cos|Tan|ASin|ACos|ATan|Pow|BitNot|BitAnd|BitOr|BitXOr|BitShiftLeft|BitShiftRight)\\b"
                        },
                        { "include": "#number" }
                    ]
                },
                { "include": "#command_gui" },
                { "include": "#command_menu" },
                { "include": "#command_sysget" },
                { "include": "#command_winset" },
                { "include": "#command_winget" },
                { "include": "#command_control" },
                { "include": "#command_controlget" },
                { "include": "#command_gui_control" },
                { "include": "#command_hotkey" },
                {
                    "name": "meta.command.line.coordmode.ahk",
                    "begin": "(?:^|[ \\t:])\\b(?i:(CoordMode)\\b[ \\t]*,?[ \\t]*\\b(ToolTip|Pixel|Mouse|Caret|Menu)\\b(?:[ \\t]*,[ \\t]*\\b(Screen|Relative|Window|Client)\\b)?)",
                    "end": "(\\n)",
                    "beginCaptures": {
                        "1": { "name": "support.function.command.coordmode.ahk" },
                        "2": { "name": "keyword.command.option.param.coordmode.ahk" },
                        "3": { "name": "keyword.command.option.param.coordmode.ahk" }
                    },
                    "patterns": [ { "include": "#expression" } ]
                },
                {
                    "name": "meta.command.line.ahk",
                    "begin": "(?<=^|[ \\t:])\\b(?i:MsgBox)\\b(?!\\()",
                    "end": "(\\n)",
                    "beginCaptures": { "0": { "name": "support.function.ahk" } },
                    "patterns": [ { "include": "#expression" } ]
                },
                {
                    "name": "meta.command.line.ahk",
                    "begin": "(?<=^|[ \\t:])\\b(?i:AutoTrim|BlockInput|Click|ClipWait|Control|ControlClick|ControlFocus|ControlGet|ControlGetFocus|ControlGetPos|ControlGetText|ControlMove|ControlSend|ControlSendRaw|ControlSetText|CoordMode|DetectHiddenText|DetectHiddenWindows|Drive|DriveGet|DriveSpaceFree|Edit|EnvAdd|EnvDiv|EnvGet|EnvMult|EnvSet|EnvSub|EnvUpdate|FileAppend|FileCopy|FileCopyDir|FileCreateDir|FileCreateShortcut|FileDelete|FileEncoding|FileGetAttrib|FileGetShortcut|FileGetSize|FileGetTime|FileGetVersion|FileInstall|FileMove|FileMoveDir|FileRead|FileReadLine|FileRecycle|FileRecycleEmpty|FileRemoveDir|FileSelectFile|FileSelectFolder|FileSetAttrib|FileSetTime|FormatTime|GetKeyState|GroupActivate|GroupAdd|GroupClose|GroupDeactivate|Gui|GuiControl|GuiControlGet|Hotkey|ImageSearch|IniDelete|IniRead|IniWrite|Input|InputBox|KeyHistory|KeyWait|ListHotkeys|ListLines|ListVars|Menu|MouseClick|MouseClickDrag|MouseGetPos|MouseMove|OnExit|OutputDebug|PixelGetColor|PixelSearch|PostMessage|Process|Progress|Random|RegDelete|RegRead|RegWrite|Run|RunAs|RunWait|Send|SendEvent|SendInput|SendLevel|SendMessage|SendMode|SendPlay|SendRaw|SetBatchLines|SetCapsLockState|SetControlDelay|SetDefaultMouseSpeed|SetEnv|SetFormat|SetKeyDelay|SetMouseDelay|SetNumLockState|SetRegView|SetScrollLockState|SetStoreCapsLockMode|SetTimer|SetTitleMatchMode|SetWinDelay|SetWorkingDir|Shutdown|Sleep|Sort|SoundBeep|SoundGet|SoundGetWaveVolume|SoundPlay|SoundSet|SoundSetWaveVolume|SplashImage|SplashTextOff|SplashTextOn|SplitPath|StatusBarGetText|StatusBarWait|StringCaseSense|StringGetPos|StringLeft|StringLen|StringLower|StringMid|StringReplace|StringRight|StringSplit|StringTrimLeft|StringTrimRight|StringUpper|Suspend|SysGet|Thread|ToolTip|Transform|TrayTip|UrlDownloadToFile|WinActivate|WinActivateBottom|WinClose|WinGet|WinGetActiveStats|WinGetActiveTitle|WinGetClass|WinGetPos|WinGetText|WinGetTitle|WinHide|WinKill|WinMaximize|WinMenuSelectItem|WinMinimize|WinMinimizeAll|WinMinimizeAllUndo|WinMove|WinRestore|WinSet|WinSetTitle|WinShow|WinWait|WinWaitActive|WinWaitClose|WinWaitNotActive)\\b(?!\\()",
                    "end": "(\\n)",
                    "beginCaptures": { "0": { "name": "support.function.ahk" } },
                    "patterns": [
                        { "include": "#command_options" },
                        { "include": "#keyword_mouse_keyboard" },
                        { "include": "#expression" }
                    ]
                }
            ]
        },
        "command_options": {
            "patterns": [
                {
                    "name": "keyword.command.option.ahk",
                    "match": "\\b(?!MsgBox)(?<![.#])(?i:abort|insert|exist|abovenormal|add|ahk_class|ahk_exe|ahk_group|ahk_id|ahk_pid|all|alnum|alpha|altsubmit|alwaysoff|alwayson|alwaysontop|autosize|background|backgroundtrans|belownormal|blind|bold|border|bottom|button|buttons|byref|cancel|capacity|caption|center|check|check3|checkbox|checked|checkedgray|choose|choosestring|click|close|color|combobox|contains|controllist|count|date|datetime|days|ddl|delete|deleteall|delimiter|destroy|digit|disable|disabled|dpiscale|dropdownlist|eject|enable|enabled|error|expand|exstyle|filesystem|first|flash|float|floatfast|focus|font|grid|group|groupbox|hdr|hidden|hide|high|hkcc|hkcr|hkcu|hkey_classes_root|hkey_current_config|hkey_current_user|hkey_local_machine|hkey_users|hklm|hku|hours|hscroll|icon|iconsmall|id|idlast|ignore|imagelist|integer|integerfast|interrupt|italic|label|lastfound|lastfoundexist|limit|lines|list|listbox|listview|lock|logoff|low|lower|lowercase|mainwindow|margin|maximize|maximizebox|maxsize|minimize|minimizebox|minmax|minsize|minutes|monthcal|mouse|move|multi|na|no|noactivate|nodefault|nohide|noicon|nomainwindow|norm|normal|nosort|nosorthdr|nostandard|notab|notimers|number|off|ok|on|owndialogs|owner|parent|parse|password|pic|picture|pixel|pos|priority|processname|radio|range|raw|read|readonly|realtime|redraw|reg_binary|reg_dword|reg_dword_big_endian|reg_expand_sz|reg_full_resource_descriptor|reg_link|reg_multi_sz|reg_qword|reg_resource_list|reg_resource_requirements_list|reg_sz|region|relative|rename|report|resize|restore|retry|rgb|screen|seconds|section|serial|setlabel|show|single|slider|sortdesc|standard|status|statusbar|statuscd|strike|style|submit|sysmenu|tab|tab2|tabstop|text|theme|tile|time|tip|togglecheck|toggleenable|toolwindow|top|topmost|transcolor|transparent|tray|treeview|tryagain|type|uncheck|underline|unlock|updown|upper|uppercase|useerrorlevel|vis|visfirst|visible|vscroll|waitclose|wantctrla|wantf2|wantreturn|wrap|xdigit|xm|xp|xs|yes|ym|yp|ys)(?![(.\\[])\\b"
                },
                {
                    "match": "::\\{(?:d20ea4e1\\-3957\\-11d2\\-a40b\\-0c5020524153|85bbd920\\-42a0\\-1069\\-a2e4\\-08002b30309d|21ec2020\\-3aea\\-1069\\-a2dd\\-08002b30309d|d20ea4e1\\-3957\\-11d2\\-a40b\\-0c5020524152|ff393560\\-c2a7\\-11cf\\-bff4\\-444553540000|00020d75\\-0000\\-0000\\-c000\\-000000000046|00028b00\\-0000\\-0000\\-c000\\-000000000046|20d04fe0\\-3aea\\-1069\\-a2d8\\-08002b30309d|450d8fba\\-ad25\\-11d0\\-98a8\\-0800361b1103|208d2c60\\-3aea\\-1069\\-a2d7\\-08002b30309d|1f4de370\\-d627\\-11d1\\-ba4f\\-00a0c91eedba|7007acc7\\-3202\\-11d1\\-aad2\\-00805fc1270e|2227a280\\-3aea\\-1069\\-a2de\\-08002b30309d|7be9d83c\\-a729\\-4d97\\-b5a7\\-1b7313c39e0a|645ff040\\-5081\\-101b\\-9f08\\-00aa002f954e|e211b736\\-43fd\\-11d1\\-9efb\\-0000f8757fcd|d6277990\\-4c6a\\-11cf\\-8d87\\-00aa0060f5bf|48e7caab\\-b918\\-4e58\\-a94d\\-505519c795dc|7bd29e00\\-76c1\\-11cf\\-9dd0\\-00a0c9034933|bdeadf00\\-c265\\-11d0\\-bced\\-00a0c90ab50f)\\}",
                    "name": "string.windows_class_identifiers.ahk"
                },
                {
                    "name": "string.command.option.ahk",
                    "match": "(?<=\\{)[{}](?=\\})"
                }
            ]
        },
        "command_gui": {
            "name": "meta.command.line.gui.ahk",
            "begin": "(?:^|[ \\t:])\\b(?i:(Gui)\\b[ \\t]*,?[ \\t]*([#$@\\w\\x{A1}-\\x{FFFF}]+:\\s*)?(New|Add|Show|Submit|Cancel|Hide|Destroy|Font|Color|Margin|Options|Menu|Minimize|Maximize|Restore|Flash|Default|-|\\+)(\\b|\\s))",
            "end": "(\\n)",
            "beginCaptures": {
                "1": { "name": "support.function.gui.command.ahk" },
                "2": { "name": "variable.other.constant.gui.name.ahk" },
                "3": { "name": "keyword.command.option.gui.param.ahk" }
            },
            "patterns": [
                {
                    "match": "\\b(?i:[WHXY](\\d+)|Center|xCenter|yCenter|AutoSize|Minimize|Maximize|Restore|NoActivate|NA|Hide)\\b",
                    "name": "keyword.string.gui.show.ahk",
                    "captures": { "1": { "name": "constant.numeric.gui.ahk" } }
                },
                {
                    "match": "\\b(?i:(?:c|0x)?([a-fA-F0-9]{6}))\\b",
                    "name": "keyword.string.gui.color.ahk",
                    "captures": { "1": { "name": "constant.numeric.gui.ahk" } }
                },
                {
                    "match": "\\b(?i:c?(Default|Black|Silver|Gray|White|Maroon|Red|Purple|Fuchsia|Green|Lime|Olive|Yellow|Navy|Blue|Teal|Aqua))\\b",
                    "name": "keyword.string.gui.color.ahk"
                },
                {
                    "match": "\\b(?i:s([1-9]\\d*))\\b",
                    "name": "keyword.string.gui.font.size.ahk",
                    "captures": { "1": { "name": "constant.numeric.gui.ahk" } }
                },
                {
                    "match": "\\b(?i:w([1-9]\\d{0,3}))\\b",
                    "name": "keyword.string.gui.font.weight.ahk",
                    "captures": { "1": { "name": "constant.numeric.gui.ahk" } }
                },
                {
                    "match": "\\b(?i:(Range))-?(\\d+)-",
                    "name": "meta.keyword.string.gui.range.ahk",
                    "captures": {
                        "1": { "name": "keyword.string.gui.range.ahk" },
                        "2": { "name": "constant.numeric.gui.ahk" }
                    }
                },
                {
                    "match": "\\b(?i:bold|italic|strike|underline|norm)\\b",
                    "name": "keyword.string.gui.font.style.ahk"
                },
                {
                    "match": "\\b(?i:q([0-5]))\\b",
                    "name": "keyword.string.gui.font.quality.ahk",
                    "captures": { "1": { "name": "constant.numeric.gui.ahk" } }
                },
                {
                    "match": "\\b(?i:AlwaysOnTop|Border|Caption|Delimiter|Disabled|DPIScale|HwndOutputVar|LabelName|LastFound|LastFoundExist|MaximizeBox|MaxSize|MinimizeBox|MinSize|OwnDialogs|Owner|Parent|Resize|SysMenu|Theme|ToolWindow)\\b",
                    "name": "keyword.string.gui.other.options.ahk"
                },
                {
                    "match": "(?<=(?i:add\\s*,\\s*))(?i:(Text|Edit|UpDown|Picture|Button|Checkbox|Radio|DropDownList|ComboBox|ListBox|ListView|TreeView|Link|Hotkey|DateTime|MonthCal|Slider|Progress|GroupBox|Tab|StatusBar|ActiveX|Custom))\\b",
                    "name": "meta.keyword.string.gui.other.options.ahk",
                    "captures": { "1": { "name": "keyword.gui.ahk" } }
                },
                { "include": "#command_options" },
                { "include": "#keyword_mouse_keyboard" },
                { "include": "#expression" },
                {
                    "match": "\\b(?i:x|y)\\b\\+",
                    "name": "keyword.string.gui.other.options.ahk"
                }
            ]
        },
        "command_menu": {
            "name": "meta.command.line.menu.ahk",
            "begin": "(?:^|[ \\t:])\\b(?i:(menu)\\b[ \\t]*(?:,[ \\t]*)?([#$@\\w\\x{A1}-\\x{FFFF}]+)[ \\t]*,[ \\t]*(Add|Insert|Delete|DeleteAll|Rename|Check|Uncheck|ToggleCheck|Enable|Disable|ToggleEnable|Default|NoDefault|Standard|NoStandard|Icon|NoIcon|Tip|Show|Color|Click|MainWindow|NoMainWindow|UseErrorLevel)\\b)",
            "end": "(\\n)",
            "beginCaptures": {
                "1": { "name": "support.function.menu.command.ahk" },
                "2": { "name": "variable.other.constant.menu.name.ahk" },
                "3": { "name": "keyword.command.option.menu.param.ahk" }
            },
            "patterns": [
                {
                    "match": "[+-]?(?i:P\\d+|Radio|Right|Break|BarBreak)\\b",
                    "name": "keyword.string.menu.add.option.ahk"
                },
                {
                    "match": "\\b(?i:HICON|HBITMAP):\\*",
                    "name": "keyword.string.menu.trayicon.option.ahk"
                },
                { "include": "#expression" }
            ]
        },
        "command_sysget": {
            "name": "meta.command.line.sysget.ahk",
            "begin": "(?:^|[ \\t:])\\b(?i:(SysGet)\\b[ \\t]*,?[ \\t]*(?:[#$@\\w\\x{A1}-\\x{FFFF}]+)[ \\t]*,[ \\t]*\\b(MonitorCount|MonitorPrimary|Monitor|MonitorWorkArea|MonitorName)\\b)",
            "end": "(\\n)",
            "beginCaptures": {
                "1": { "name": "support.function.command.sysget.ahk" },
                "2": { "name": "keyword.command.option.param.sysget.ahk" }
            },
            "patterns": [ { "include": "#expression" } ]
        },
        "command_winset": {
            "name": "meta.command.line.winset.ahk",
            "begin": "(?:^|[ \\t:])\\b(?i:(WinSet)\\b[ \\t]*,?[ \\t]*\\b(AlwaysOnTop|Bottom|Top|Disable|Enable|Redraw|Style|ExStyle|Region|Transparent|TransColor)\\b)",
            "end": "(\\n)",
            "beginCaptures": {
                "1": { "name": "support.function.command.winset.ahk" },
                "2": { "name": "keyword.command.option.param.winset.ahk" }
            },
            "patterns": [ { "include": "#expression" } ]
        },
        "command_winget": {
            "name": "meta.command.line.winget.ahk",
            "begin": "(?:^|[ \\t:])\\b(?i:(WinGet)\\b[ \\t]*,?[ \\t]*(?:[#$@\\w\\x{A1}-\\x{FFFF}]+)[ \\t]*,?[ \\t]*\\b(ID|IDLast|PID|ProcessName|ProcessPath|Count|List|MinMax|ControlList|ControlListHwnd|Transparent|TransColor|Style|ExStyle)\\b)",
            "end": "(\\n)",
            "beginCaptures": {
                "1": { "name": "support.function.command.winget.ahk" },
                "2": { "name": "keyword.command.option.param.winget.ahk" }
            },
            "patterns": [ { "include": "#expression" } ]
        },
        "command_control": {
            "name": "meta.command.line.control.ahk",
            "begin": "(?:^|[ \\t:])\\b(?i:(Control)\\b[ \\t]*,?[ \\t]*\\b(Check|Uncheck|Enable|Disable|Show|Hide|Style|ExStyle|ShowDropDown|HideDropDown|TabLeft|TabRight|Add|Delete|Choose|ChooseString|EditPaste)\\b)",
            "end": "(\\n)",
            "beginCaptures": {
                "1": { "name": "support.function.command.control.ahk" },
                "2": { "name": "keyword.command.option.param.control.ahk" }
            },
            "patterns": [ { "include": "#expression" } ]
        },
        "command_controlget": {
            "name": "meta.command.line.controlget.ahk",
            "begin": "(?:^|[ \\t:])\\b(?i:(ControlGet)\\b[ \\t]*,?[ \\t]*(?:[#$@\\w\\x{A1}-\\x{FFFF}]+)[ \\t]*,[ \\t]*(List|Checked|Enabled|Visible|Tab|FindString|Choice|LineCount|CurrentLine|CurrentCol|Line|Selected|Style|ExStyle|Hwnd)\\b)",
            "end": "(\\n)",
            "beginCaptures": {
                "1": { "name": "support.function.command.controlget.ahk" },
                "2": { "name": "keyword.command.option.param.controlget.ahk" }
            },
            "patterns": [ { "include": "#expression" } ]
        },
        "command_gui_control": {
            "name": "meta.command.line.gui_control.ahk",
            "begin": "(?:^|[ \\t:])\\b(?i:(guiControl)\\b[ \\t]*,?[ \\t]*([#$@\\w\\x{A1}-\\x{FFFF}]+:\\s*)?(Text|Move|MoveDraw|Focus|Disable|Enable|Hide|Show|Choose|ChooseString|Font|[ \t]*|(?:[ \t]*[+-][ \t]*\\w+)+)(\\b|\\s|,))",
            "end": "(\\n)",
            "beginCaptures": {
                "1": { "name": "support.function.gui_control.command.ahk" },
                "2": { "name": "variable.other.constant.gui_control.name.ahk" },
                "3": { "name": "keyword.command.option.gui_control.param.ahk" }
            },
            "patterns": [
                { "include": "#command_options" },
                { "include": "#keyword_mouse_keyboard" },
                { "include": "#expression" }
            ]
        },
        "command_hotkey": {
            "patterns": [
                {
                    "name": "meta.command.if.hotkey.command.ahk",
                    "begin": "(?:^|[ \\t:])\\b(?i:(hotkey)\\b[ \\t]*,?[ \\t]*)(?i:\\b(IF|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist)\\b)",
                    "end": "(\\n)",
                    "beginCaptures": {
                        "1": { "name": "support.function.hotkey.command.ahk" },
                        "2": { "name": "keyword.control.flow.hotkey.command.ahk" }
                    },
                    "patterns": [ { "include": "#expression" } ]
                },
                {
                    "name": "meta.command.key.hotkey.command.ahk",
                    "begin": "(?:^|[ \\t:])\\b(?i:(hotkey)\\b[ \\t]*,?[ \\t]*)([^,]*)",
                    "end": "(\\n)",
                    "beginCaptures": {
                        "1": { "name": "support.function.hotkey.command.ahk" },
                        "2": {
                            "name": "meta.hotkey.command.ahk",
                            "patterns": [
                                { "include": "#keylist" },
                                {
                                    "match": "[!-/]|[:-@]|[\\[-`]|[\\{-~]",
                                    "name": "string.2.storage.modifier.hotkey.command.ahk"
                                },
                                {
                                    "match": "(?<![a-zA-Z0-9])[a-zA-Z0-9](?![a-zA-Z0-9])",
                                    "name": "markup.bold.hotkey.command.ahk"
                                }
                            ]
                        }
                    },
                    "patterns": [ { "include": "#expression" } ]
                }
            ]
        },
        "comment_ahk2exe": {
            "captures": {
                "1": { "name": "other.customize.keyword.comment.ahk2exe.ahk" },
                "2": { "name": "keyword.comment.ahk2exe.ahk" }
            },
            "match": "^[ \\t]*;(?i:(@Ahk2Exe-)(IgnoreBegin|IgnoreEnd|AddResource|Bin|Base|ConsoleApp|Cont|Debug|ExeName|Let|Nop|Obey|PostExec|ResourceID|SetMainIcon|SetCompanyName|SetCopyright|SetDescription|SetFileVersion|SetInternalName|SetLanguage|SetLegalTrademarks|SetName|SetOrigFilename|SetProductName|SetProductVersion|SetVersion|Set|UpdateManifest|UseResourceLang)\\b).*",
            "name": "comment.line.ahk2exe.ahk"
        },
        "comment_neko_help_ignore": {
            "name": "comment.line.semicolon.ahk",
            "begin": "^[ \\t]*;@ahk-neko",
            "end": "\n",
            "patterns": [
                {
                    "captures": {
                        "1": { "name": "keyword.other.ahk" },
                        "2": { "name": "constant.numeric.ahk" }
                    },
                    "match": "-(ignore(?:-fn)?)[ \\t]+(\\d+)\\b"
                },
                {
                    "captures": {
                        "1": { "name": "keyword.other.ahk" },
                        "2": { "name": "keyword.other.ahk" }
                    },
                    "match": "-(format)-(?:inline-spacing-)?ignore-(start|end)"
                }
            ]
        },
        "comment_region": {
            "name": "comment.line.region.ahk",
            "match": "^[ \\t]*;\\s*(?:((?i:\\[(?:end)?region\\]|#(?:end)?region\\b))|((?:#\\s*)?MARK:))\\s*(.*)?\\n",
            "captures": {
                "1": { "name": "comment.line.region.head.ahk" },
                "2": { "name": "comment.line.region.head.ahk" },
                "3": { "name": "comment.line.region.text.ahk" }
            }
        },
        "inline_tags": {
            "patterns": [
                {
                    "name": "constant.other.description.ahk",
                    "match": "(\\[)[^\\]]+(\\])(?={@(?:link|linkcode|linkplain|tutorial))",
                    "captures": {
                        "1": { "name": "punctuation.definition.bracket.square.begin.ahk" },
                        "2": { "name": "punctuation.definition.bracket.square.end.ahk" }
                    }
                },
                {
                    "name": "entity.name.type.instance.ahk",
                    "begin": "({)((@)(?:link(?:code|plain)?|tutorial))\\s*",
                    "beginCaptures": {
                        "1": { "name": "punctuation.definition.bracket.curly.begin.ahk" },
                        "2": { "name": "storage.type.class.ahk" },
                        "3": { "name": "punctuation.definition.inline.tag.ahk" }
                    },
                    "end": "}|(?=\\*/)",
                    "endCaptures": { "0": { "name": "punctuation.definition.bracket.curly.end.ahk" } },
                    "patterns": [
                        {
                            "match": "\\G((?=https?://)(?:[^|}\\s*]|\\*[/])+)(\\|)?",
                            "captures": {
                                "1": { "name": "variable.other.link.underline.ahk" },
                                "2": { "name": "punctuation.separator.pipe.ahk" }
                            }
                        },
                        {
                            "match": "\\G((?:[^{}@\\s|*]|\\*[^/])+)(\\|)?",
                            "captures": {
                                "1": { "name": "variable.other.description.ahk" },
                                "2": { "name": "punctuation.separator.pipe.ahk" }
                            }
                        }
                    ]
                }
            ]
        },
        "brackets": {
            "patterns": [
                {
                    "begin": "{",
                    "end": "}|(?=\\*/)",
                    "patterns": [ { "include": "#brackets" } ]
                },
                {
                    "begin": "\\[",
                    "end": "\\]|(?=\\*/)",
                    "patterns": [ { "include": "#brackets" } ]
                }
            ]
        },
        "jsdoctype": {
            "patterns": [
                {
                    "contentName": "entity.name.type.instance.ahk",
                    "begin": "\\G({)",
                    "beginCaptures": {
                        "0": { "name": "entity.name.type.instance.ahk" },
                        "1": { "name": "punctuation.definition.bracket.curly.begin.ahk" }
                    },
                    "end": "((}))\\s*|(?=\\*/)",
                    "endCaptures": {
                        "1": { "name": "entity.name.type.instance.ahk" },
                        "2": { "name": "punctuation.definition.bracket.curly.end.ahk" }
                    },
                    "patterns": [ { "include": "#brackets" } ]
                }
            ]
        },
        "docblock": {
            "patterns": [
                {
                    "match": "(?x)\n((@)(?:access|api))\n\\s+\n(private|protected|public)\n\\b",
                    "captures": {
                        "1": { "name": "storage.type.class.ahk" },
                        "2": { "name": "punctuation.definition.block.tag.ahk" },
                        "3": { "name": "constant.language.access_type.ahk" }
                    }
                },
                {
                    "match": "(?x)\n((@)author)\n\\s+\n(\n  [^@\\s<>*/]\n  (?:[^@<>*/]|\\*[^/])*\n)\n(?:\n  \\s*\n  (<)\n  ([^>\\s]+)\n  (>)\n)?",
                    "captures": {
                        "1": { "name": "storage.type.class.ahk" },
                        "2": { "name": "punctuation.definition.block.tag.ahk" },
                        "3": { "name": "entity.name.type.instance.ahk" },
                        "4": { "name": "punctuation.definition.bracket.angle.begin.ahk" },
                        "5": { "name": "constant.other.email.link.underline.ahk" },
                        "6": { "name": "punctuation.definition.bracket.angle.end.ahk" }
                    }
                },
                {
                    "match": "(?x)\n((@)borrows) \\s+\n((?:[^@\\s*/]|\\*[^/])+)    # <that namepath>\n\\s+ (as) \\s+              # as\n((?:[^@\\s*/]|\\*[^/])+)    # <this namepath>",
                    "captures": {
                        "1": { "name": "storage.type.class.ahk" },
                        "2": { "name": "punctuation.definition.block.tag.ahk" },
                        "3": { "name": "entity.name.type.instance.ahk" },
                        "4": { "name": "keyword.operator.control.ahk" },
                        "5": { "name": "entity.name.type.instance.ahk" }
                    }
                },
                {
                    "name": "meta.example.ahk",
                    "begin": "((@)example)\\s+",
                    "end": "(?=@|\\*/)",
                    "beginCaptures": {
                        "1": { "name": "storage.type.class.ahk" },
                        "2": { "name": "punctuation.definition.block.tag.ahk" }
                    },
                    "patterns": [
                        { "match": "^\\s\\*\\s+" },
                        {
                            "contentName": "constant.other.description.ahk",
                            "begin": "\\G(<)caption(>)",
                            "beginCaptures": {
                                "0": { "name": "entity.name.tag.inline.ahk" },
                                "1": { "name": "punctuation.definition.bracket.angle.begin.ahk" },
                                "2": { "name": "punctuation.definition.bracket.angle.end.ahk" }
                            },
                            "end": "(</)caption(>)|(?=\\*/)",
                            "endCaptures": {
                                "0": { "name": "entity.name.tag.inline.ahk" },
                                "1": { "name": "punctuation.definition.bracket.angle.begin.ahk" },
                                "2": { "name": "punctuation.definition.bracket.angle.end.ahk" }
                            }
                        },
                        {
                            "match": "[^\\s@*](?:[^*]|\\*[^/])*",
                            "captures": { "0": { "name": "source.embedded.ahk" } }
                        }
                    ]
                },
                {
                    "match": "(?x) ((@)kind) \\s+ (class|constant|event|external|file|function|member|mixin|module|namespace|typedef) \\b",
                    "captures": {
                        "1": { "name": "storage.type.class.ahk" },
                        "2": { "name": "punctuation.definition.block.tag.ahk" },
                        "3": { "name": "constant.language.symbol_type.ahk" }
                    }
                },
                {
                    "match": "(?x)\n((@)see)\n\\s+\n(?:\n  # URL\n  (\n    (?=https?://)\n    (?:[^\\s*]|\\*[^/])+\n  )\n  |\n  # JSDoc namepath\n  (\n    (?!\n      # Avoid matching bare URIs (also acceptable as links)\n      https?://\n      |\n      # Avoid matching {@inline tags}; we match those below\n      (?:\\[[^\\[\\]]*\\])? # Possible description [preceding]{@tag}\n      {@(?:link|linkcode|linkplain|tutorial)\\b\n    )\n    # Matched namepath\n    (?:[^@\\s*/]|\\*[^/])+\n  )\n)",
                    "captures": {
                        "1": { "name": "storage.type.class.ahk" },
                        "2": { "name": "punctuation.definition.block.tag.ahk" },
                        "3": { "name": "variable.other.link.underline.ahk" },
                        "4": { "name": "entity.name.type.instance.ahk" }
                    }
                },
                {
                    "match": "(?x)\n((@)template)\n\\s+\n# One or more valid identifiers\n(\n  [A-Za-z_$]         # First character: non-numeric word character\n  [\\w$.\\[\\]]*        # Rest of identifier\n  (?:                # Possible list of additional identifiers\n    \\s* , \\s*\n    [A-Za-z_$]\n    [\\w$.\\[\\]]*\n  )*\n)",
                    "captures": {
                        "1": { "name": "storage.type.class.ahk" },
                        "2": { "name": "punctuation.definition.block.tag.ahk" },
                        "3": { "name": "variable.other.ahk" }
                    }
                },
                {
                    "begin": "(?x)((@)template)\\s+(?={)",
                    "beginCaptures": {
                        "1": { "name": "storage.type.class.ahk" },
                        "2": { "name": "punctuation.definition.block.tag.ahk" }
                    },
                    "end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
                    "patterns": [
                        { "include": "#jsdoctype" },
                        {
                            "name": "variable.other.ahk",
                            "match": "([A-Za-z_$][\\w$.\\[\\]]*)"
                        }
                    ]
                },
                {
                    "match": "(?x)\n(\n  (@)\n  (?:arg|argument|const|constant|member|namespace|param|var)\n)\n\\s+\n(\n  [A-Za-z_$]\n  [\\w$.\\[\\]]*\n)",
                    "captures": {
                        "1": { "name": "storage.type.class.ahk" },
                        "2": { "name": "punctuation.definition.block.tag.ahk" },
                        "3": { "name": "variable.other.ahk" }
                    }
                },
                {
                    "begin": "((@)typedef)\\s+(?={)",
                    "beginCaptures": {
                        "1": { "name": "storage.type.class.ahk" },
                        "2": { "name": "punctuation.definition.block.tag.ahk" }
                    },
                    "end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
                    "patterns": [
                        { "include": "#jsdoctype" },
                        {
                            "name": "entity.name.type.instance.ahk",
                            "match": "(?:[^@\\s*/]|\\*[^/])+"
                        }
                    ]
                },
                {
                    "begin": "((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\\s+(?={)",
                    "beginCaptures": {
                        "1": { "name": "storage.type.class.ahk" },
                        "2": { "name": "punctuation.definition.block.tag.ahk" }
                    },
                    "end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
                    "patterns": [
                        { "include": "#jsdoctype" },
                        {
                            "name": "variable.other.ahk",
                            "match": "([A-Za-z_$][\\w$.\\[\\]]*)"
                        },
                        {
                            "name": "variable.other.ahk",
                            "match": "(?x)\n(\\[)\\s*\n[\\w$]+\n(?:\n  (?:\\[\\])?                                        # Foo[ ].bar properties within an array\n  \\.                                                # Foo.Bar namespaced parameter\n  [\\w$]+\n)*\n(?:\n  \\s*\n  (=)                                                # [foo=bar] Default parameter value\n  \\s*\n  (\n    # The inner regexes are to stop the match early at */ and to not stop at escaped quotes\n    (?>\n      \"(?:(?:\\*(?!/))|(?:\\\\(?!\"))|[^*\\\\])*?\" |                      # [foo=\"bar\"] Double-quoted\n      '(?:(?:\\*(?!/))|(?:\\\\(?!'))|[^*\\\\])*?' |                      # [foo='bar'] Single-quoted\n      \\[ (?:(?:\\*(?!/))|[^*])*? \\] |                                # [foo=[1,2]] Array literal\n      (?:(?:\\*(?!/))|\\s(?!\\s*\\])|\\[.*?(?:\\]|(?=\\*/))|[^*\\s\\[\\]])*   # Everything else\n    )*\n  )\n)?\n\\s*(?:(\\])((?:[^*\\s]|\\*[^\\s/])+)?|(?=\\*/))",
                            "captures": {
                                "1": { "name": "punctuation.definition.optional_value.begin.bracket.square.ahk" },
                                "2": { "name": "keyword.operator.assignment.ahk" },
                                "3": { "name": "source.embedded.ahk" },
                                "4": { "name": "punctuation.definition.optional_value.end.bracket.square.ahk" },
                                "5": { "name": "invalid.illegal.syntax.ahk" }
                            }
                        }
                    ]
                },
                {
                    "begin": "(?x)\n(\n  (@)\n  (?:define|enum|exception|export|extends|lends|implements|modifies\n  |namespace|private|protected|returns?|satisfies|suppress|this|throws|type\n  |yields?)\n)\n\\s+(?={)",
                    "beginCaptures": {
                        "1": { "name": "storage.type.class.ahk" },
                        "2": { "name": "punctuation.definition.block.tag.ahk" }
                    },
                    "end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
                    "patterns": [ { "include": "#jsdoctype" } ]
                },
                {
                    "match": "(?x)\n(\n  (@)\n  (?:alias|augments|callback|constructs|emits|event|fires|exports?\n  |extends|external|function|func|host|lends|listens|interface|memberof!?\n  |method|module|mixes|mixin|name|requires|see|this|typedef|uses)\n)\n\\s+\n(\n  (?:\n    [^{}@\\s*] | \\*[^/]\n  )+\n)",
                    "captures": {
                        "1": { "name": "storage.type.class.ahk" },
                        "2": { "name": "punctuation.definition.block.tag.ahk" },
                        "3": { "name": "entity.name.type.instance.ahk" }
                    }
                },
                {
                    "contentName": "variable.other.ahk",
                    "begin": "((@)(?:default(?:value)?|license|version))\\s+(([''\"]))",
                    "beginCaptures": {
                        "1": { "name": "storage.type.class.ahk" },
                        "2": { "name": "punctuation.definition.block.tag.ahk" },
                        "3": { "name": "variable.other.ahk" },
                        "4": { "name": "punctuation.definition.string.begin.ahk" }
                    },
                    "end": "(\\3)|(?=$|\\*/)",
                    "endCaptures": {
                        "0": { "name": "variable.other.ahk" },
                        "1": { "name": "punctuation.definition.string.end.ahk" }
                    }
                },
                {
                    "match": "((@)(?:default(?:value)?|license|tutorial|variation|version))\\s+([^\\s*]+)",
                    "captures": {
                        "1": { "name": "storage.type.class.ahk" },
                        "2": { "name": "punctuation.definition.block.tag.ahk" },
                        "3": { "name": "variable.other.ahk" }
                    }
                },
                {
                    "name": "storage.type.class.ahk",
                    "match": "(?x) (@) (?:abstract|access|alias|api|arg|argument|async|attribute|augments|author|beta|borrows|bubbles |callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright |default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exception |exports?|extends|extension(?:_?for)?|external|externs|file|fileoverview|final|fires|for|func |function|generator|global|hideconstructor|host|ignore|implements|implicitCast|inherit[Dd]oc |inner|instance|interface|internal|kind|lends|license|listens|main|member|memberof!?|method |mixes|mixins?|modifies|module|name|namespace|noalias|nocollapse|nocompile|nosideeffects |override|overview|package|param|polymer(?:Behavior)?|preserve|private|prop|property|protected |public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary |suppress|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation |version|virtual|writeOnce|yields?) \\b",
                    "captures": { "1": { "name": "punctuation.definition.block.tag.ahk" } }
                },
                { "include": "#inline_tags" },
                {
                    "match": "((@)(?:[_$[:alpha:]][_$[:alnum:]]*))(?=\\s+)",
                    "captures": {
                        "1": { "name": "storage.type.class.ahk" },
                        "2": { "name": "punctuation.definition.block.tag.ahk" }
                    }
                }
            ]
        },
        "comment": {
            "patterns": [
                { "include": "#comment_neko_help_ignore" },
                { "include": "#comment_ahk2exe" },
                { "include": "#comment_region" },
                {
                    "captures": {
                        "1": { "name": "other.customize.keyword.comment.ahk2exe.ahk" },
                        "2": { "name": "keyword.comment.ahk2exe.ahk" }
                    },
                    "match": "^[ \\t]*;(?i:(@Ahk2Exe-)(%\\w+%)).*",
                    "name": "comment.line.ahk2exe.ahk"
                },
                {
                    "captures": { "1": { "name": "comment.line.semicolon.ahk" } },
                    "match": "(?:^|[ \\t])(;.*)",
                    "name": "meta.comment.line.semicolon.ahk"
                },
                {
                    "captures": { "1": { "name": "comment.line.semicolon.issues20.ahk" } },
                    "match": "(?<=[ \\t])(;.*)",
                    "name": "meta.comment.line.semicolon.issues20.ahk"
                },
                {
                    "begin": "^[ \\t]*/\\*\\*",
                    "end": "^[ \\t]*\\*/",
                    "name": "comment.block.documentation.ahk",
                    "patterns": [
                        { "include": "#docblock" },
                        { "include": "#comment_neko_help_ignore" },
                        { "include": "#comment_ahk2exe" },
                        { "include": "#comment_region" }
                    ]
                },
                {
                    "begin": "^[ \\t]*/\\*(?i:@ahk-neko-format-(ignore-block)\\b)",
                    "beginCaptures": { "1": { "name": "keyword.comment.format.ignore.block.ahk" } },
                    "end": "^[ \\t]*\\*/",
                    "name": "comment.block.ahk",
                    "patterns": [
                        { "include": "#comment_neko_help_ignore" },
                        { "include": "#comment_ahk2exe" },
                        { "include": "#comment_region" }
                    ]
                },
                {
                    "begin": "^[ \\t]*/\\*(?i:(@Ahk2Exe-)(Keep)\\b)",
                    "beginCaptures": {
                        "1": { "name": "other.customize.keyword.comment.ahk2exe.ahk" },
                        "2": { "name": "keyword.comment.ahk2exe.keep.ahk" }
                    },
                    "end": "^[ \\t]*\\*/",
                    "name": "comment.block.ahk",
                    "patterns": [
                        { "include": "#comment_neko_help_ignore" },
                        { "include": "#comment_ahk2exe" },
                        { "include": "#comment_region" }
                    ]
                },
                {
                    "begin": "^[ \\t]*/\\*",
                    "end": "^[ \\t]*\\*/",
                    "name": "comment.block.ahk",
                    "patterns": [
                        { "include": "#comment_neko_help_ignore" },
                        { "include": "#comment_ahk2exe" },
                        { "include": "#comment_region" }
                    ]
                }
            ]
        },
        "include_builtin_var": {
            "match": "(?<=%)(?i:A_(?:AhkPath|AhkVersion|AppData|AppDataCommon|Args|AutoTrim|BatchLines|NumBatchLines|CaretX|CaretY|Clipboard|ComSpec|ComputerName|ControlDelay|CoordModeCaret|CoordModeMenu|CoordModeMouse|CoordModePixel|CoordModeToolTip|Cursor|DD|MDay|DDD|DDDD|DefaultGui|DefaultListView|DefaultMouseSpeed|DefaultTreeView|Desktop|DesktopCommon|DetectHiddenText|DetectHiddenWindows|EndChar|EventInfo|ExitReason|FileEncoding|FormatFloat|FormatInteger|Gui|GuiControl|GuiControlEvent|GuiEvent|GuiHeight|GuiWidth|GuiX|GuiY|Hour|IPAddress1|IPAddress2|IPAddress3|IPAddress4|IconFile|IconHidden|IconNumber|IconTip|Index|Is64bitOS|IsAdmin|IsCompiled|IsCritical|IsPaused|IsSuspended|IsUnicode|KeyDelay|KeyDelayPlay|KeyDuration|KeyDurationPlay|Language|LastError|LineFile|LineNumber|ListLines|LoopField|LoopFileAttrib|LoopFileDir|LoopFileExt|LoopFileFullPath|LoopFileLongPath|LoopFileName|LoopFilePath|LoopFileShortName|LoopFileShortPath|LoopFileSize|LoopFileSizeKB|LoopFileSizeMB|LoopFileTimeAccessed|LoopFileTimeCreated|LoopFileTimeModified|LoopReadLine|LoopRegKey|LoopRegName|LoopRegSubKey|LoopRegTimeModified|LoopRegType|MM|Mon|MMM|MMMM|MSec|Min|MouseDelay|MouseDelayPlay|MyDocuments|Now|NowUTC|OSType|OSVersion|PriorHotkey|PriorKey|ProgramFiles|Programs|ProgramsCommon|PtrSize|RegView|ScreenDPI|ScreenHeight|ScreenWidth|ScriptDir|ScriptFullPath|ScriptHwnd|ScriptName|Sec|SendLevel|SendMode|Space|StartMenu|StartMenuCommon|Startup|StartupCommon|StoreCapsLockMode|StringCaseSense|Tab|Temp|ThisFunc|ThisHotkey|ThisLabel|ThisMenu|ThisMenuItem|ThisMenuItemPos|TickCount|TimeIdle|TimeIdleKeyboard|TimeIdleMouse|TimeIdlePhysical|TimeSincePriorHotkey|TimeSinceThisHotkey|TitleMatchMode|TitleMatchModeSpeed|UserName|WDay|WinDelay|WinDir|WorkingDir|InitialWorkingDir|YDay|YWeek|YYYY|Year))(?=%)",
            "name": "variable.other.constant.builtin.include.ahk"
        },
        "directives": {
            "patterns": [
                {
                    "name": "string.entity.name.namespace.import.ahk",
                    "begin": "^[ \\t]*((?i:#include(?:Again)?))[ \\t]+(\\*i)?",
                    "beginCaptures": {
                        "1": { "name": "keyword.control.import.ahk" },
                        "2": { "name": "keyword.operator.arithmetic.ahk" }
                    },
                    "end": "\\n",
                    "patterns": [
                        { "include": "#include_builtin_var" },
                        { "include": "#comment" },
                        {
                            "match": "`;",
                            "name": "constant.character.escape.namespace.import.ahk"
                        }
                    ]
                },
                {
                    "captures": { "1": { "name": "keyword.control.directives._if.ahk" } },
                    "patterns": [ { "include": "#expression" } ],
                    "match": "^[ \\t]*(?i:(#if))(?=[ \\t]|$)",
                    "name": "meta._if.keyword.control.directives._if.ahk"
                },
                {
                    "name": "string.parameter.directives.ahk",
                    "begin": "^[ \\t]*(#\\b(?i:AllowSameLineComments|ClipboardTimeout|CommentFlag|Delimiter|DerefChar|ErrorStdOut|EscapeChar|HotkeyInterval|HotkeyModifierTimeout|Hotstring|If|IfTimeout|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Include|IncludeAgain|InputLevel|InstallKeybdHook|InstallMouseHook|KeyHistory|LTrim|MaxHotkeysPerInterval|MaxMem|MaxThreads|MaxThreadsBuffer|MaxThreadsPerHotkey|MenuMaskKey|NoEnv|NoTrayIcon|Persistent|Requires|SingleInstance|UseHook|Warn|WinActivateForce))\\b",
                    "beginCaptures": { "1": { "name": "keyword.control.directives.ahk" } },
                    "end": "\\n",
                    "patterns": [ { "include": "#comment" } ]
                }
            ]
        },
        "escaped_char": {
            "patterns": [
                {
                    "match": "`[,%`;nrbtvaf]",
                    "name": "constant.character.escape.ahk"
                },
                {
                    "match": "`.",
                    "name": "invalid.illegal.unknown.character.escape.ahk"
                }
            ]
        },
        "expression": {
            "name": "meta.expression.ahk",
            "patterns": [
                { "include": "#string" },
                { "include": "#number" },
                { "include": "#comment" },
                { "include": "#keyword_operator" },
                { "include": "#func_call" },
                { "include": "#builtin_variable" }
            ]
        },
        "flow_of_control": {
            "patterns": [
                {
                    "match": "\\b(?!MsgBox)(?<![.#])(?i:(goto|goSub|Break|Continue|OnExit))\\b[ \\t]*?,?[ \\t]*([#$@\\w\\x{A1}-\\x{FFFF}]+)?[ \\t]*([ \\t]+;.*)?$",
                    "name": "meta.goto.gosub.ahk",
                    "captures": {
                        "1": { "name": "keyword.control.flow.ahk" },
                        "2": { "name": "entity.name.function.label.ahk" },
                        "3": { "name": "comment.line.gosub.ahk" }
                    }
                },
                { "include": "#flow_of_control_loop_plus" },
                { "include": "#flow_of_control_loop_reg" },
                { "include": "#flow_of_control_loop_old" },
                {
                    "match": "\\b(?!MsgBox)(?<![.#])(?i:Break|Case|Catch|Critical|Default|Else|Exit|ExitApp|Finally|For|GoSub|Goto|If|IfEqual|IfExist|IfGreater|IfGreaterOrEqual|IfInString|IfLess|IfLessOrEqual|IfMsgBox|IfNotEqual|IfNotExist|IfNotInString|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Loop|Pause|Reload|Return|Switch|Throw|Try|Until|While)\\b(?!\\()",
                    "name": "keyword.control.flow.ahk"
                }
            ]
        },
        "flow_of_control_loop_plus": {
            "name": "meta.loop.ahk",
            "begin": "\\b(?!MsgBox)(?<![.#])(?i:\\b(loop)\\b[ \\t]*?,?[ \\t]*(Files|Parse|Read))",
            "end": "\\n",
            "beginCaptures": {
                "1": { "name": "keyword.loop.control.flow.ahk" },
                "2": { "name": "keyword.loop.param.control.flow.ahk" }
            },
            "patterns": [ { "include": "#expression" } ]
        },
        "flow_of_control_loop_reg": {
            "name": "meta.loop.ahk",
            "begin": "\\b(?!MsgBox)(?<![.#])(?i:\\b(loop)\\b[ \\t]*?,?[ \\t]*(Reg))",
            "end": "\\n",
            "beginCaptures": {
                "1": { "name": "keyword.loop.control.flow.loop.reg.ahk" },
                "2": { "name": "keyword.loop.param.control.flow.loop.reg.ahk" }
            },
            "patterns": [
                { "include": "#const_var_reg" },
                { "include": "#expression" }
            ]
        },
        "flow_of_control_loop_old": {
            "name": "meta.loop.old.ahk",
            "begin": "\\b(?!MsgBox)(?<![.#])(?i:\\b(loop)\\b[ \\t]*?,?[ \\t]*)",
            "end": "\\n",
            "beginCaptures": { "1": { "name": "keyword.loop.control.flow.loop.old.ahk" } },
            "patterns": [
                { "include": "#const_var_reg" },
                { "include": "#expression" }
            ]
        },
        "const_var_reg": {
            "match": "(?<=[, \\t:])(?i:(HKLM|HKEY_LOCAL_MACHINE|HKCR|HKEY_CLASSES_ROOT|HKCC|HKEY_CURRENT_CONFIG|HKCU|HKEY_CURRENT_USER|HKU|HKEY_USERS))(?=[, \\t\\\\])",
            "name": "meta.goto.loop.reg.ahk",
            "captures": { "1": { "name": "keyword.loop.param.control.flow.loop.reg.ahk" } }
        },
        "func_call": {
            "patterns": [
                {
                    "match": "(?<=^(?i:new)[ \\t]+)[#$@\\w\\x{A1}-\\x{FFFF}]+",
                    "name": "entity.name.type.class.ahk"
                },
                {
                    "match": "(?<=[ \\t](?i:new)[ \\t]+)[#$@\\w\\x{A1}-\\x{FFFF}]+",
                    "name": "entity.name.type.class.ahk"
                },
                {
                    "match": "(?<![.`%#])\\b(?i:Abs|ACos|Array|Asc|ASin|ATan|Ceil|Chr|ComObjActive|ComObjArray|ComObjConnect|ComObjCreate|ComObject|ComObjError|ComObjFlags|ComObjGet|ComObjQuery|ComObjType|ComObjValue|Cos|DllCall|Exception|Exp|FileExist|FileOpen|Floor|Format|Func|GetKeyName|GetKeySC|GetKeyState|GetKeyVK|Hotstring|IL_Add|IL_Create|IL_Destroy|InputHook|InStr|IsByRef|IsFunc|IsLabel|IsObject|IsSet|Ln|LoadPicture|Log|LTrim|LV_Add|LV_Delete|LV_DeleteCol|LV_GetCount|LV_GetNext|LV_GetText|LV_Insert|LV_InsertCol|LV_Modify|LV_ModifyCol|LV_SetImageList|Max|MenuGetHandle|MenuGetName|Min|Mod|NumGet|NumPut|ObjAddRef|ObjBindMethod|ObjGetBase|ObjRawGet|ObjRawSet|ObjRelease|ObjSetBase|OnClipboardChange|OnError|OnExit|OnMessage|Ord|RegExMatch|RegExReplace|RegisterCallback|Round|RTrim|SB_SetIcon|SB_SetText|SB_SetParts|Sin|Sqrt|StrGet|StrLen|StrPut|StrReplace|StrSplit|SubStr|Tan|Trim|TV_Add|TV_Delete|TV_Get|TV_GetChild|TV_GetCount|TV_GetNext|TV_GetParent|TV_GetPrev|TV_GetSelection|TV_GetText|TV_Modify|TV_SetImageList|VarSetCapacity|VerCompare|WinActive|WinExist|ComObjMissing|ComObjParameter|ComObjEnwrap|ComObjUnwrap)(?=\\()\\b",
                    "name": "support.function.ahk"
                },
                {
                    "match": "(?<![.`%#])\\b(?i:ComObj\\w+)(?=\\()\\b",
                    "name": "support.function.com.ahk"
                },
                {
                    "match": "[#$@\\w\\x{A1}-\\x{FFFF}]+(?=\\()",
                    "name": "entity.name.function.ahk"
                },
                {
                    "match": "\\b(?<=\\.)(?i:read|write|readline|writeline|readuint|readint|readint64|readshort|readushort|readchar|readuchar|readdouble|readfloat|writeuint|writeint|writeint64|writeshort|writeushort|writechar|writeuchar|writedouble|writefloat|rawread|rawwrite|seek|tell|close|insert|remove|minindex|maxindex|setcapacity|getcapacity|getaddress|newenum|haskey|clone|isoptional|__new|__call|__get|__set|__delete)(?=\\()\\b",
                    "name": "support.function.methods.object.ahk"
                },
                {
                    "match": "\\b(?<=\\.)(?i:Position|Pos|Length|AtEOF|Encoding|Handle|__Handle|Name|IsBuiltIn|IsVariadic|MinParams|MaxParams|Base)(?!\\[|\\(|\\.)\\b",
                    "name": "support.function.property.object.ahk"
                }
            ]
        },
        "hotkey": {
            "name": "meta.hotkey.line.ahk",
            "begin": "^[ \t]*([#!^+&<>*~$]+|(?:<\\^[<>]!))?([!-/]|[:-@]|[\\[-`]|[\\{-~]|[a-zA-Z0-9]+)([ \\t]&[ \\t]([!-/]|[:-@]|[\\[-`]|[\\{-~]|[a-zA-Z0-9]+))?([ \\t]+(?i:UP))?(?=::)",
            "beginCaptures": {
                "1": { "name": "storage.modifier.hotkey.ahk" },
                "2": {
                    "name": "meta.2.hotkey.line.ahk",
                    "patterns": [
                        { "include": "#keylist" },
                        {
                            "match": "[!-/]|[:-@]|[\\[-`]|[\\{-~]",
                            "name": "string.2.storage.modifier.hotkey.ahk"
                        },
                        {
                            "match": "(?<![a-zA-Z0-9])[a-zA-Z0-9](?![a-zA-Z0-9])",
                            "name": "markup.bold.hotkey.ahk"
                        }
                    ]
                },
                "3": { "name": "storage.modifier.and.hotkey.ahk" },
                "4": {
                    "name": "meta.4.hotkey.line.ahk",
                    "patterns": [
                        { "include": "#keylist" },
                        {
                            "match": "[!-/]|[:-@]|[\\[-`]|[\\{-~]",
                            "name": "string.2.storage.modifier.hotkey.ahk"
                        },
                        {
                            "match": "(?<![a-zA-Z0-9])[a-zA-Z0-9](?![a-zA-Z0-9])",
                            "name": "markup.bold.hotkey.ahk"
                        }
                    ]
                },
                "5": { "name": "storage.modifier.up.hotkey.ahk" }
            },
            "end": "::",
            "patterns": [ { "include": "#comment" } ]
        },
        "hotstring": {
            "patterns": [
                {
                    "captures": {
                        "1": { "name": "keyword.operator.hotstring.x.flag.ahk" },
                        "2": { "name": "entity.name.function.hotstring.x.flag.ahk" },
                        "3": { "name": "string.entity.name.function.hotstring.trigger.x.flag.ahk.ahk" }
                    },
                    "match": "^[ \\t]*(:(?i:([^:Xx]*[Xx][^:Xx]*)):([^:]+)::)",
                    "name": "hotstring.x.flag.ahk"
                },
                {
                    "captures": {
                        "1": { "name": "keyword.operator.hotstring.r.flag.ahk" },
                        "2": { "name": "entity.name.function.hotstring.r.flag.ahk" },
                        "3": { "name": "string.entity.name.function.hotstring.trigger.r.flag.ahk" },
                        "4": {
                            "name": "string.hotstring.r.flag.ahk",
                            "patterns": [
                                {
                                    "name": "comment.line.hotstring.ahk",
                                    "match": "(?<=[ \t]);.*"
                                },
                                {
                                    "match": "`[rntb`vaf]",
                                    "name": "constant.character.escape.ahk"
                                },
                                {
                                    "match": "`.",
                                    "name": "invalid.illegal.unknown.character.escape.ahk"
                                }
                            ]
                        }
                    },
                    "match": "^[ \\t]*(:(?i:([^:Rr]*[Rr][^:Rr]*)):([^:]+)::)(.*)",
                    "name": "hotstring.r.flag.ahk"
                },
                {
                    "captures": {
                        "1": { "name": "keyword.operator.hotstring.t.flag.ahk" },
                        "2": { "name": "entity.name.function.hotstring.t.flag.ahk" },
                        "3": { "name": "string.entity.name.function.hotstring.trigger.t.flag.ahk" },
                        "4": {
                            "name": "string.hotstring.t.flag.ahk",
                            "patterns": [
                                {
                                    "name": "comment.line.hotstring.ahk",
                                    "match": "(?<=[ \t]);.*"
                                },
                                {
                                    "match": "`[rntb`]",
                                    "name": "constant.character.escape.ahk"
                                },
                                {
                                    "match": "`.",
                                    "name": "invalid.illegal.unknown.character.escape.ahk"
                                }
                            ]
                        }
                    },
                    "match": "^[ \\t]*(:(?i:([^:Tt]*[Tt][^:Tt]*)):([^:]+)::)(.*)",
                    "name": "hotstring.t.flag.ahk"
                },
                {
                    "captures": {
                        "1": { "name": "keyword.operator.hotstring.with_rt.flag.ahk" },
                        "2": { "name": "entity.name.function.hotstring.with_rt.flag.ahk" },
                        "3": { "name": "string.entity.name.function.hotstring.trigger.with_rt.flag.ahk" },
                        "4": {
                            "name": "string.hotstring.with_rt.flag.ahk",
                            "patterns": [
                                {
                                    "name": "comment.line.hotstring.ahk",
                                    "match": "(?<=[ \t]);.*"
                                },
                                {
                                    "match": "`[rntb`vaf]",
                                    "name": "constant.character.escape.ahk"
                                },
                                {
                                    "match": "`.",
                                    "name": "invalid.illegal.unknown.character.escape.ahk"
                                },
                                {
                                    "name": "entity.name.function.hotstring.normal.flag.ahk",
                                    "match": "[{][}]{2}"
                                },
                                {
                                    "name": "entity.name.function.hotstring.normal.flag.ahk",
                                    "match": "[{]{2}[}]"
                                },
                                {
                                    "name": "entity.name.function.hotstring.normal.flag.ahk",
                                    "match": "[{][^}]*[}]"
                                },
                                {
                                    "captures": { "1": { "name": "entity.name.function.hotstring.normal.flag.ahk" } },
                                    "match": "([#!^+])."
                                }
                            ]
                        }
                    },
                    "match": "^[ \\t]*(:(?i:([^:RrTt]*)):([^:]+)::)(.*)",
                    "name": "hotstring.normal.flag.ahk"
                },
                {
                    "name": "string.hotstring.ahk",
                    "begin": "^[ \\t]*(:([^:]*?):([^:]+)::)",
                    "beginCaptures": {
                        "1": { "name": "keyword.operator.ahk" },
                        "2": { "name": "entity.name.function.hotstring.flag.ahk" },
                        "3": { "name": "string.entity.name.function.hotstring.trigger.ahk" }
                    },
                    "end": "\\n",
                    "patterns": [ { "include": "#comment" } ]
                }
            ]
        },
        "keylist": {
            "patterns": [
                {
                    "match": "\\b(?i:shift|lshift|rshift|alt|lalt|ralt|control|lcontrol|rcontrol|ctrl|lctrl|rctrl|lwin|rwin|appskey|lbutton|rbutton|mbutton|WheelUp|WheelDown|wheelleft|wheelright|xbutton1|xbutton2|space|tab|enter|escape|esc|backspace|bs|delete|del|insert|ins|pgdn|pgup|home|end|up|down|left|right|printscreen|ctrlbreak|pause|scrolllock|capslock|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadmult|numpadadd|numpadsub|numpaddiv|numpaddot|numpaddel|numpadins|numpadclear|numpadleft|numpadright|numpaddown|numpadup|numpadhome|numpadend|numpadpgdn|numpadpgup|numpadenter|f1|f2|f3|f4|f5|f6|f7|f8|f9|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f20|f21|f22|f23|f24|browser_back|browser_forward|browser_refresh|browser_stop|browser_search|browser_favorites|browser_home|volume_mute|volume_down|volume_up|media_next|media_prev|media_stop|media_play_pause|launch_mail|launch_media|launch_app1|launch_app2|vk[a-f\\d]{1,2}(sc[a-f\\d]+)?|sc[a-f\\d]+)\\b",
                    "name": "markup.bold.hotkey.ahk"
                },
                {
                    "match": "\\b(1[0-6]|[1-9])?(?i:joy1|joy2|joy3|joy4|joy5|joy6|joy7|joy8|joy9|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy30|joy31|joy32|joyx|joyy|joyz|joyr|joyu|joyv|joypov|joyname|joybuttons|joyaxes|joyinfo)\\b",
                    "name": "markup.bold.hotkey.joy.ahk"
                }
            ]
        },
        "keyword_mouse_keyboard": {
            "patterns": [
                {
                    "match": "(?<![.#])\\b(?i:shift|lshift|rshift|alt|lalt|ralt|control|lcontrol|rcontrol|ctrl|lctrl|rctrl|lwin|rwin|appskey|lbutton|rbutton|mbutton|WheelUp|WheelDown|wheelleft|wheelright|xbutton1|xbutton2|space|tab|enter|escape|esc|backspace|bs|delete|del|insert|ins|pgdn|pgup|home|end|up|down|left|right|printscreen|ctrlbreak|pause|scrolllock|capslock|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadmult|numpadadd|numpadsub|numpaddiv|numpaddot|numpaddel|numpadins|numpadclear|numpadleft|numpadright|numpaddown|numpadup|numpadhome|numpadend|numpadpgdn|numpadpgup|numpadenter|f1|f2|f3|f4|f5|f6|f7|f8|f9|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f20|f21|f22|f23|f24|browser_back|browser_forward|browser_refresh|browser_stop|browser_search|browser_favorites|browser_home|volume_mute|volume_down|volume_up|media_next|media_prev|media_stop|media_play_pause|launch_mail|launch_media|launch_app1|launch_app2|vk[a-f\\d]{1,2}(sc[a-f\\d]+)?|sc[a-f\\d]+)\\b(?!\\()",
                    "name": "keyword.keys.ahk"
                },
                {
                    "match": "(?<![.#])\\b(1[0-6]|[1-9])?(?i:joy1|joy2|joy3|joy4|joy5|joy6|joy7|joy8|joy9|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy30|joy31|joy32|joyx|joyy|joyz|joyr|joyu|joyv|joypov|joyname|joybuttons|joyaxes|joyinfo)\\b(?!\\()",
                    "name": "keyword.keys.joy.ahk"
                },
                {
                    "match": "(?<![.#])\\b(?i:AltTab|ShiftAltTab|AltTabMenu|AltTabAndMenu|AltTabMenuDismiss)\\b(?!\\()",
                    "name": "keyword.keys.joy.ahk"
                }
            ]
        },
        "keyword_operator": {
            "patterns": [
                {
                    "match": "\\+|-|\\*|\\^|/|&|#|!|~|\\||<<|>>|>>>",
                    "name": "keyword.operator.arithmetic.ahk"
                },
                {
                    "match": "=|[~:+\\-*/.|&^]=|//=|>>=|<<=|>>>=|\\|=",
                    "name": "keyword.operator.assignment.ahk"
                },
                {
                    "match": "<=|>=|<>|==|>|<|!=|!==",
                    "name": "keyword.operator.comparison.ahk"
                },
                {
                    "match": "[:?]",
                    "name": "keyword.operator.ternary.ahk"
                },
                {
                    "match": "[(){}\\[\\]]",
                    "name": "punctuation.bracket.ahk"
                },
                {
                    "match": "%",
                    "name": "punctuation.definition.variable.percent.ahk"
                },
                { "include": "#escaped_char" },
                {
                    "match": "[`,]",
                    "name": "punctuation.ahk"
                }
            ]
        },
        "label_line": {
            "patterns": [
                {
                    "captures": { "1": { "name": "keyword.control.ahk" } },
                    "match": "^[ \\t]*((?:Default))[ \\t]*:",
                    "name": "labelline.ahk"
                },
                {
                    "captures": {
                        "1": {
                            "name": "entity.name.function.label.ahk",
                            "patterns": [
                                {
                                    "match": "([#$@\\w\\x{A1}-\\x{FFFF}]+)(?i:GuiClose|GuiEscape|GuiSize|GuiContextMenu|GuiDropFiles):",
                                    "captures": { "1": { "name": "variable.other.constant.gui.name.ahk" } }
                                }
                            ]
                        },
                        "2": { "name": "comment.line.semicolon.label.ahk" }
                    },
                    "match": "^[ \\t]*\\}?[ \\t]*([#$@\\w\\x{A1}-\\x{FFFF}]+:)[ \\t]*([ \\t];.*)?$",
                    "name": "labelline.ahk"
                }
            ]
        },
        "number": {
            "patterns": [
                {
                    "match": "\\b(?<!\\.)(0[xX])[0-9a-fA-F]+\\b(?!\\.)",
                    "name": "constant.numeric.hexadecimal.ahk",
                    "captures": { "1": { "name": "keyword.other.unit.numeric.hexadecimal.ahk" } }
                },
                {
                    "match": "\\b(?<!\\.)[0-9]+\\b(?!\\.)",
                    "name": "constant.numeric.decimal.ahk"
                },
                {
                    "match": "\\b(?<!\\.)[0-9]+\\.[0-9]+(?:([eE])[+-]?[0-9]+)?\\b(?!\\.)",
                    "name": "constant.numeric.decimal.ahk",
                    "captures": { "1": { "name": "keyword.other.unit.numeric.decimal.ahk" } }
                },
                {
                    "match": "(?:[ \\t]|^)\\.[0-9]+(?:([eE])[+-]?[0-9]+)?\\b(?!\\.)",
                    "name": "constant.numeric.decimal.ahk",
                    "captures": { "1": { "name": "keyword.other.unit.numeric.decimal.ahk" } }
                },
                {
                    "match": "\\b(?<!\\.)[0-9]+\\.[0-9]*([eE])[+-]?[0-9]+\\b(?!\\.)",
                    "name": "constant.numeric.decimal.ahk",
                    "captures": { "1": { "name": "keyword.other.unit.numeric.decimal.ahk" } }
                },
                {
                    "match": "(?<![.#])\\b(?i:False|True)\\b",
                    "name": "variable.other.constant.builtin.boolean.ahk"
                }
            ]
        },
        "declaration": {
            "match": "^[ \\t{]*(?i:Static|Global|Local)(?=$|[ \\t])",
            "name": "keyword.other.operator.hasdoc.ahk"
        },
        "operator": {
            "match": "(?<=^|[#$@%!\"/&'()*+,\\-:;<=>?[\\^\\\\]{|}~ \\t])(?i:and|Between|contains|in|is|new|not|or|ByRef)(?:$|[ \\t])",
            "name": "keyword.other.operator.hasdoc.ahk"
        },
        "string": {
            "begin": "(\")",
            "beginCaptures": { "1": { "name": "punctuation.definition.string.begin.ahk" } },
            "end": "(?:(\")(?!\"))|$|(?:[ \\t](?=;))",
            "endCaptures": { "1": { "name": "punctuation.definition.string.end.ahk" } },
            "name": "string.quoted.double.ahk",
            "patterns": [
                {
                    "match": "\"\"",
                    "name": "constant.character.escape.ahk"
                },
                {
                    "match": "`[,%`;nrbtvaf:]",
                    "name": "constant.character.escape.ahk"
                }
            ]
        },
        "string_multi_line": {
            "begin": "^[ \\t]*\\(((?:[^);])*)([ \\t];.*)?$",
            "beginCaptures": {
                "1": { "name": "keyword.multiline.ahk" },
                "2": { "name": "comment.line.semicolon.ahk" }
            },
            "end": "^[ \\t]*\\)(?:\")?",
            "name": "string.multiline.ahk",
            "patterns": [ { "include": "#escaped_char" } ]
        },
        "old_set_var_legacy_assignment": {
            "patterns": [
                {
                    "begin": "^[ \\t]*(?:%\\w%)?\\w+(?:%\\w%)?[ \\t]*=(?!=)(.*)",
                    "beginCaptures": {
                        "1": {
                            "patterns": [
                                {
                                    "match": "(.*?)(?:%[ \\t](.*))?$",
                                    "captures": {
                                        "1": {
                                            "name": "string.old_set_var.ahk",
                                            "patterns": [
                                                { "include": "#escaped_char" },
                                                { "include": "#comment" },
                                                { "include": "#builtin_variable" },
                                                { "include": "#number" }
                                            ]
                                        },
                                        "2": {
                                            "name": "meta.old_set_var_expression.ahk",
                                            "patterns": [ { "include": "#expression" } ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "end": "\\n",
                    "name": "meta.old_set_var_case0.ahk"
                }
            ]
        }
    },
    "scopeName": "source.ahk"
}
